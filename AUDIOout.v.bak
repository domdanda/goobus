
module AUDIOout (
	// Inputs
	CLOCK_50,
	KEY,

	AUD_ADCDAT,

	// Bidirectionals
	AUD_BCLK,
	AUD_ADCLRCK,
	AUD_DACLRCK,

	I2C_SDAT,

	// Outputs
	AUD_XCK,
	AUD_DACDAT,

	I2C_SCLK,
	SW
);

/*****************************************************************************
 *                           Parameter Declarations                          *
 *****************************************************************************/


/*****************************************************************************
 *                             Port Declarations                             *
 *****************************************************************************/
// Inputs
input				CLOCK_50;
input		[3:0]	KEY;
input		[9:0]	SW;

input				AUD_ADCDAT;

// Bidirectionals
inout				AUD_BCLK;
inout				AUD_ADCLRCK;
inout				AUD_DACLRCK;

inout				I2C_SDAT;

// Outputs
output				AUD_XCK;
output				AUD_DACDAT;

output				I2C_SCLK;

/*****************************************************************************
 *                 Internal Wires and Registers Declarations                 *
 *****************************************************************************/


// State Machine Registers

/*****************************************************************************
 *                         Finite State Machine(s)                           *
 *****************************************************************************/


/*****************************************************************************
 *                             Sequential Logic                              *
 *****************************************************************************/

// Internal Wires
wire				audio_in_available;
wire		[31:0]	left_channel_audio_in;
wire		[31:0]	right_channel_audio_in;
wire				read_audio_in;

wire				audio_out_allowed;
wire		[31:0]	left_channel_audio_out;
wire		[31:0]	right_channel_audio_out;
wire				write_audio_out;

wire 		[3:0] 	SOUND_TO_PLAY;
//wire				play_sound;

// Internal Registers
//reg [3:0] prev_sound_to_play;
reg [20:0] delay_cnt;
reg [20:0] delay_cnt2;
wire [20:0] delay;
wire [20:0] delay2;
reg [26:0] rate_divider_counter;
// for .mif file audio
reg [19:0] memory [0:63]; // 8 bit notes; 2-word memory
reg [5:0] mem_addr;
wire [19:0] mem_data;
reg [5:0] mem_addr2;
wire [19:0] mem_data2;

//mif init
ROM #(
	.FILE("sound.mif"),
	.WORDS(64),
	.BITS_PER_WORD(20),
	.ADDRESS_WIDTH(6)
) soundFile (mem_addr, CLOCK_50, mem_data);

ROM #(
	.FILE("sound2.mif"),
	.WORDS(64),
	.BITS_PER_WORD(20),
	.ADDRESS_WIDTH(6)
) soundFile2 (mem_addr2, CLOCK_50, mem_data2);

initial begin
//	prev_sound_to_play <= SOUND_TO_PLAY;
	mem_addr <= 0;
	mem_addr2 <= 0;
	rate_divider_counter <= 0;
end

reg snd;
reg snd2;

assign delay = {11'd0, mem_data};
assign delay2 = {11'd0, mem_data2};
 
 
// this rate divider will play the current tone
always @(posedge CLOCK_50) begin
//	if(play_sound) begin
		//hard-coded 2hz rate divider that increments notes
		if(rate_divider_counter == 12500000 - 1) begin
			rate_divider_counter <= 0;
			mem_addr <= mem_addr + 1;
			mem_addr2 <= mem_addr2 +1;
//			// effectively sets play_sound to false if we have reached end of file (file contains 2 notes)
//			if(mem_addr == 2) mem_addr <= 0;
//			delay <= mem_data;
		end else rate_divider_counter <= rate_divider_counter + 1;
		// square wave of frequency (50 mil/delay)
		if(delay_cnt == delay) begin
			delay_cnt <= 0;
			snd <= !snd;
		end else delay_cnt <= delay_cnt + 1;
		if(delay_cnt2 == delay2) begin
			delay_cnt2 <= 0;
			snd2 <= !snd2;
		end else delay_cnt2 <= delay_cnt2 + 1;
//	end
end

wire [31:0] sound = snd ? 32'd50000000 : -32'd50000000;
wire [31:0] sound2 = snd2 ? 32'd50000000 : -32'd50000000;



assign read_audio_in			= audio_in_available & audio_out_allowed;

assign left_channel_audio_out	= left_channel_audio_in+sound;
assign right_channel_audio_out	= right_channel_audio_in+sound2;
assign write_audio_out			= audio_in_available & audio_out_allowed;

/*****************************************************************************
 *                              Internal Modules                             *
 *****************************************************************************/

Audio_Controller Audio_Controller (
	// Inputs
	.CLOCK_50						(CLOCK_50),
	.reset						(~KEY[0]),

	.clear_audio_in_memory		(),
	.read_audio_in				(read_audio_in),
	
	.clear_audio_out_memory		(),
	.left_channel_audio_out		(left_channel_audio_out),
	.right_channel_audio_out	(right_channel_audio_out),
	.write_audio_out			(write_audio_out),

	.AUD_ADCDAT					(AUD_ADCDAT),

	// Bidirectionals
	.AUD_BCLK					(AUD_BCLK),
	.AUD_ADCLRCK				(AUD_ADCLRCK),
	.AUD_DACLRCK				(AUD_DACLRCK),


	// Outputs
	.audio_in_available			(audio_in_available),
	.left_channel_audio_in		(left_channel_audio_in),
	.right_channel_audio_in		(right_channel_audio_in),

	.audio_out_allowed			(audio_out_allowed),

	.AUD_XCK					(AUD_XCK),
	.AUD_DACDAT					(AUD_DACDAT)

);

avconf #(.USE_MIC_INPUT(1)) avc (
	.I2C_SCLK					(I2C_SCLK),
	.I2C_SDAT					(I2C_SDAT),
	.CLOCK_50					(CLOCK_50),
	.reset						(~KEY[0])
);

endmodule

